// 正确的乱序算法
// 两个数字要不要交换是随机的
let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; //按位置洗好牌，从后往前，取随机数的时候更方便
// 经典的洗牌算法要求每个数都参与交换
function shuffle(arr) {
//    每个数都要交换,
// 先从数组中选一个数，我们以倒序来写，方便一点
// 每次洗牌都是要先找一个数
// 9和 未洗牌的区间 第一次，整数组都是从未洗过牌的，就是从0-9这个区间跟9比较进行交换，参与了之后，第9个位置就洗好牌了
// 8: 未洗牌的区间0-8位置 选一个随机数 交换
// 7、: 未洗牌的区间0-7 选一个随机数 交换
// 6: 未洗牌的区间0-6 选一个随机数 交换
// 每个数字，出现在每个位置上的概率是
    let len = arr.length;
    for(let i = 0; i < len; i ++) {
        // 2.区间
        let randomIndex = Math.floor(Math.random() * (len - i))  //我们要的是整数，所以要区个整
        // 1.想要最后一个数字
        // 3. 交换我们的得出的随机的位置
        [arr[len - i - 1], arr[randomIndex]] = [arr[randomIndex], arr[len - i - 1]]  //随着i变大，这个值变小，所以可以从后往前

    }
    return arr;
}